# -*- coding: utf-8 -*-
"""Aitask2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DIDm5bjAD--EIAfxqnaWbfX4zIf7mrP1
"""

# Task 1: Start of the day
# Initialize data structures
train_journey_passengers = [0, 0, 0, 0, 0, 0, 0, 0]
train_journey_revenue = [0, 0, 0, 0, 0, 0, 0, 0]
train_capacity = [480, 480, 480, 480, 480, 480, 480, 560]

# Task 2: Purchasing tickets
def purchase_tickets(up_train, down_train, num_tickets):
    if train_capacity[up_train] >= num_tickets and train_capacity[down_train] >= num_tickets:
        total_price = num_tickets * 25
        group_discount = num_tickets // 10 * 25
        total_price -= group_discount
        train_journey_passengers[up_train] += num_tickets
        train_journey_passengers[down_train] += num_tickets
        train_journey_revenue[up_train] += total_price
        train_journey_revenue[down_train] += total_price
        train_capacity[up_train] -= num_tickets
        train_capacity[down_train] -= num_tickets
        return f"Tickets purchased successfully for {num_tickets} passengers. Total price: ${total_price}"
    else:
        return "Tickets not available for the selected train journeys."

# Task 3: End of the day
def end_of_day_summary():
    total_passengers = sum(train_journey_passengers)
    total_revenue = sum(train_journey_revenue)
    max_passengers = max(train_journey_passengers)
    most_popular_journey = train_journey_passengers.index(max_passengers)

    print("End of the day summary:")
    for i in range(8):
        print(f"Train {i+1}: Passengers: {train_journey_passengers[i]}, Revenue: ${train_journey_revenue[i]}")

    print(f"Total Passengers: {total_passengers}, Total Revenue: ${total_revenue}")
    print(f"Most Popular Journey: Train {most_popular_journey + 1} with {max_passengers} passengers.")

# Example usage:
purchase_tickets(0, 4, 20)  # Purchasing 20 tickets for up-train 1 and down-train 1
purchase_tickets(2, 6, 15)  # Purchasing 15 tickets for up-train 3 and down-train 3
end_of_day_summary()  # Display end of day summary